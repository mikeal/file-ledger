const fileLedger = require('../')
const contentfs = require('contentfs')
const inmem = require('lucass/inmemory')
const abstractLedger = require('abstract-ledger')
const test = require('tap').test

test('basics: set, get', async t => {
  t.plan(3)
  let ledger = abstractLedger(inmem())
  let local = inmem()
  let remote = inmem()
  let remote2 = inmem()
  let cfs = fileLedger(local, remote, ledger)
  await cfs.set('/test.txt', Buffer.from('test'))
  t.same(await cfs.get('/test.txt'), Buffer.from('test'))
  let cfs2 = contentfs(remote, remote2)
  await cfs2.setRoot(await cfs.getRoot(), null)
  t.same(await cfs2.get('/test.txt'), Buffer.from('test'))
  let cfs3 = fileLedger(inmem(), remote, ledger)
  t.same(await cfs3.get('/test.txt'), Buffer.from('test'))
})

test('basics: set and overwrite', async t => {
  t.plan(4)
  let ledger = abstractLedger(inmem())
  let store = inmem()
  let cfs = fileLedger(store, inmem(), ledger)
  let cfs2 = fileLedger(inmem(), store, ledger)
  await cfs.set('/test.txt', Buffer.from('test'))
  t.same(await cfs.get('/test.txt'), Buffer.from('test'))
  t.same(await cfs2.get('/test.txt'), Buffer.from('test'))
  await cfs2.set('/test.txt', Buffer.from('test2'))
  t.same(await cfs.get('/test.txt'), Buffer.from('test2'))
  t.same(await cfs2.get('/test.txt'), Buffer.from('test2'))
})
